Processing 버전 3.2.3

사용한 라이브러리 
- kinect4winsdk
- opencv for processing
- java.awt.rectangle

모니터 해상도: 1176 * 664 (고해상도로 할 경우 부하가 있어서 낮췄습니다) 좌우 1.5cm정도의 여백이 생기는 것을 고려해서 모래가 벗어나지 못하게 아크릴판 같은 것을 설치할 때 이 부분을 포함시켜야할 듯 합니다.

1. 생물체 관리

1) 생물체 생성 주기
classAquarium에 있는 setup함수 내부의
int planktonDelay; 
int pollywogDelay;
int midDelay;
int jellyfishDelay;
int octopusDelay;
int starfishDelay;
int deepseafishDelay;
int standardArea;
이 변수들을 조정하면 됩니다. frameRate에 곱해지는 값이므로 각각을 초(sec)단위라고 생각하시면 됩니다. 

2) 생물체가 생성되는 양
생물체들을 생성하는 정도는 우선 기준이 되는 면적 크기 standardArea라는 변수가 있고 자신의 면적을 이 값으로 나눠서 배율을 standardForNum에 담아줍니다. 이를 

    int planktonLmtNum = constrain(standardForNum * 5, 3, 15);
    int pollywogLmtNum = constrain(standardForNum * 3, 2, 9);
    int midFishLmtNum = constrain(standardForNum * 1, 1, 4);
    int jellyfishLmtNum = constrain(standardForNum * 1, 1, 2);
    int octopusLmtNum = constrain(standardForNum * 1, 1, 2);
    int starfishLmtNum = constrain(standardForNum * 2, 0, 6);
    int deepseafishLmtNum = constrain(standardForNum, 0, 2);
이런식으로 * 일정값의 형태로 생물체 생성수를 제한해줍니다. 여기서 전체적으로 생물체 수를 조절하고 싶다면 standardArea를 조정하고 각각을 조정하고 싶다면 옆에 붙은 5, 3, 1, 1, 1, 2들을 조절해주면 됩니다.

3) 생물체 모양
생물체들은 크게 tentacle과 Nottentacle 생물체로 나뉩니다.
tentacle은 작은 물고기, 중간 물고기, 물뱀, 문어, 해파리이고 Nottentacle은 불가사리, 심해어입니다.
tentacle은 작은 원들이 모여 하나의 생물체를 만드는 구조로 머리 하나에 여러개의 tentacle이 붙는 구조입니다.

tentalc 생물체의 모양을 변경하려면

void addPlankton(PVector moveDir, point spawnInfo) //제일 작은 물고기를 생성하는 함수
  {
    monsterNum[planktonId]++;
    monsterNumber++;
    int px = int(spawnInfo.x + random(-spawnInfo.radiusX +50, spawnInfo.radiusX -50));
    int py = int(spawnInfo.y + random(-spawnInfo.radiusY +50, spawnInfo.radiusY -50));

    PVector startPosition;
    if (px > 0.0)
      startPosition = new PVector(px, py);  
    else startPosition = new PVector(random(40, width-40), random(40, height-40));

    color headColor = SelectColor(planktonId, int(random(0, 5))); //생물체의 색깔을 정해주는 부분으로 colortable탭에서 자신의 id에 해당하는 color값을 변경해주면 됩니다.
    float size = random(4, 6);
    float speed = random (1, 1.5);  // 생물체의 움직이는 속도
    creatures.add (new Creature (planktonId, headColor, startPosition, moveDir, speed //생물체들의 모양을 바꾸고싶다면 tentacle count과 tentacle parts 그리고 compactness를 변경하면 된다
      , size*0.5   // Size 
      , 1   // tentacle count -> 만들어지는 촉수의 개수
      , 10   // tentacle parts -> 각 촉수마다 생기는 작은 원의 개수  이 예의 경우 촉수 1개에 10개의 작은원 즉 하나의 선이 생기게 되어 물고기처럼 보이게 됩니다.
      , 3*0.5   // compactness -> 작은 원들의 간격
      , 88, 33   
      , 0.1, 0.3   // 유선형 움직임을 조절하기 위한 변수 진폭과 주기라고 보면 됩니다.
      , spawnInfo
      , false
      , this

      ));
  }
다만 생물체의 크기 조절의 경우 화면 크기에 적당하게 맞춰놨으니 그대로 쓰시는 것을 추천드립니다. 이 부분을 바꾸려면 size와 compacness를 적당한 비율로 조절해야해서 까다롭습니다. 아니면 creature내부 draw함수에서 scale함수를 호출해서 조절하는 방법도 있습니다.

Nottentacle인 불가사리와 심해어의 경우 creature 내부에 starfishDraw, deepseafishDraw 두개의 함수가 있으니 참고하시길 바랍니다.

4) 생물체 색깔

colorTable탭에 있는 selectColor함수 내부 값을 조절하시면 됩니다.
각 생물체의 id에 맞게 color값을 반환해주는데 j가 생물체의 id이고 idx는 랜덤으로 넣어주는 건데 같은 색계열 속에서 어느정도 다양성을 위해 랜덤으로 색을 할당해주기 위함입니다.
이는 위의 addPlankton 함수 내부에서 호출이 되어 headColor 변수에 담기게 됩니다.

2. 배경 이미지 넣는 방법

배경 이미지의 경우 넣게 되면 부하가 좀 있으므로 안 넣는것을 추천드립니다. 다만 넣는 방법은 다음과 같습니다.
폴더 내부의 data폴더에 넣고자하는 배경이미지를 넣어주시고 setup 함수 내부에 bgImage = loadImage("bottom_6.gif"); 여기서 "bottom_6.gif" 이 부분을 이미지 이름으로 변경해주고 MapManager의 CleanMap 함수 내부

bgImage.resize(1176, 664); //배경이미지를 넣고싶다면 이 두 주석을 풀면됩니다.
background(bgImage);

이 경우 맵을 배경이미지로 지우는 것이므로 더 이상 CleanMap의  
fill(0, 200, 200); 
rect(0, 0, width, height); 두 부분을 필요없으므로 주석처리하시면 됩니다.

3. 현장에서 키넥트 연동해서 설치하는 방법
우선 classAquarium의 setup에서 kinect = new Kinect(this); 부분의 주석을 해제해주시고 MapManager 탭에서 다음과 같이 작업하시면 됩니다.

  PImage tempImage = loadImage(imgName[int(random(0, imgName.length))]);  //테스르를 할 때에는 imgName배열에 담아놓은 5개의 이미지 중 랜덤으로 불러오게 했다 이 부분을 주석처리한다.
  //PImage tempImage =  kinect.GetImage();  // 주석을 풀어줍니다. 키넥트를 쓸 때에는 키넥트에서 이미지를 가져온다
    tempImage = getReversePImage(tempImage); //키넥트의 이미지는 좌우가 반전되어 있으므로 다시 반전시켜준다
  // tempImage = tempImage.get(0, 0, 320, 240); // 주석을 풀어줍니다. 현장에서 설치할 경우 키넥트에 모래 부분만 딱 들어오게 설치할 수가 없다 따라서 들어온 이미지에서 필요없는 부분은 없애버려야한다. 현장 설치의 경우 이 변수를 손봐야한다 키넥트의 이미지는 640, 480으로 들어오는데 그 중에 모래가 설치된 부분만 화면에 잡혀야한다. 따라서 0, 0을 모래가 시작되는 좌상단 픽셀 좌표로 잡아주고 320, 240을 width와 height를 넣어주면 된다
    tempImage.resize(1176, 664); //잘라낸 이미지를 우리가 출력할 화면 해상도인 1176, 664로 늘려준다. 준비한 모니터에 좌우 1cm가량 여백이 생기지만 부하가 걸려서 해상도를 낮췄다.

4. 현장에서 손봐야하는 부분

1)빛에 의한 간섭이 생길 수 있으니 MapManager에 있는 opencv.threshold(200); 에서 값을 조정해주면 됩니다. 낮추면 모래있는 부분에 대한 판정을 완화해서 많이 어두운 부분이 아니라면 모래가 없다고 인식하고 높이면 조금만 어두워도 모래가 있다고 인식합니다. 테스트할 때에는 200의 값은 손가락 부분도 모래로 인식했었는데 손가락 역시 모래로 인식하는게 맞을 듯 합니다.

2)너무 작게 모래를 파면 아예 그리지 않아야하는데 이 기준은 현장에서 보면서 조절해야합니다. 이는
MakeMap과 ChangeMap 두 부분에 있는
for (Contour contour : contours)
  {
    if (contour.area() > 30000) //이 30000의 값을 조절해야합니다. 현재는 1176*664의 약 1/26정도 되는 크기는 돼야 아쿠아리움을 만들도록 해놨습니다. 
    {
      fill(255); 
      Rectangle rects = contour.getBoundingBox();
      tempPoint = new point(contour, rects.x + rects.width/2, rects.y + rects.height/2, rects.width/2, rects.height/2);

      areaInfo.add(tempPoint);
    }
  }  

3) kinect 맵 정보가 매번 갱신이 되게되면 부하가 걸립니다. 따라서 현재는 classAquarium에 있는 mapFrameRate = 180;으로 관리하고 있는데 현재 frameRate를 30으로 설정해놨으니 6초마다 맵이 갱신됩니다.
즉 모래를 파더라도 최대 6초가 지나야 그 부분을 인식해서 아쿠아리움을 그리는 것입니다. 현장에서 직접 모래를 파고 변형해가면서 어느정도로 설정하는게 제일 자연스러울지 결정해야할 듯 합니다.















